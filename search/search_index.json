{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>The Adobe Experience Platform API is a RESTful API that can be used to interact with the Adobe Experience Platform.</p> <p>This site contains the project documentation for the <code>aezpz</code> project that makes it easy to authenticate and  make requests to the Adobe Experience Platform API.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install aezpz\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import aezpz\n# Load the credentials from the credentials file\napi = aezpz.load_config('path/to/credentials.json')\n# Make a request to the API\napi.schemas.find(title='my_schema')\n</code></pre>"},{"location":"#credentials","title":"Credentials","text":"<ol> <li> <p>Sign in to the Adobe Developer Console with your Adobe Experience Platform account https://developer.adobe.com/console</p> </li> <li> <p>Create a new project or use an existing project</p> </li> <li> <p>Add the Experience Platform API to your project</p> </li> <li> <p>Create OAuth Server-to-Server credentials for your project</p> </li> <li> <p>On the Credentials page click the \"Download JSON\" button to download the credentials file</p> </li> </ol> <p></p>"},{"location":"explanation/","title":"Explanation","text":"<p>This project aims to feel similar to using an ORMs (Object-Relational Mappers) for databases. By using an object oriented approach, the user can interact with the API in a way that is similar to interacting with objects in Python.</p>"},{"location":"guides/","title":"Guides","text":""},{"location":"guides/#adding-a-field-to-a-schema","title":"Adding a Field to a Schema","text":"<p>First you'll need to load the schema that you want to add a field to. You can do this by calling the <code>schemas.get</code> method and passing the <code>id</code> of the schema that you want to load.</p> <pre><code>import aezpz\n# Load the credentials from the credentials file\napi = aezpz.load_config('path/to/credentials.json')\n# Load the schema by id\nschema = api.schemas.get('_mytenant.schemas.7a5416d13571')\n</code></pre> <p>Alternatively, you can use the <code>schemas.find</code> method to find the schema by title.</p> Note <p>When searching for a schema by title, it is good to specify the container with <code>tenant_schemas</code> or <code>global_schemas</code> so that less requests are made to the server.</p> <p>Use <code>tenant_schemas</code> for schemas that were created by your organization and <code>global_schemas</code> for schemas that are \"built-in\" to the platform and provided by Adobe.</p> <pre><code># Load the schema by title\nschema = api.tenant_schemas.find(title='My Schema')\n</code></pre> <p>Once you have the schema loaded, you can add a field to the schema by calling the <code>fields.create</code> method on the schema object.</p> <p>Not Implemented</p> <p>This feature is not implemented yet. The below example will not work in the current version of the library.</p> <pre><code># Add a field to the schema\nfield = schema.fields.create(\ntitle='My Field',\ndescription='This is a field that I added to the schema',\ntype='string'\n)\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#aezpz.api.load_config","title":"<code>load_config(config_file, verbose=True, sandbox='prod')</code>","text":"<p>Initialize the api from a config file</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import aezpz\n&gt;&gt;&gt; api = aezpz.load_config(\"auth.json\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>The filepath of your json config file that you downloaded from AEP</p> required <code>verbose</code> <code>bool</code> <p>Whether to print the status code of every request. Defaults to True</p> <code>True</code> <code>sandbox</code> <code>str</code> <p>The name of the sandbox to use. Defaults to 'prod'</p> <code>'prod'</code> <p>Returns:</p> Type Description <code>Api</code> <p>The initialized api interface</p> Source code in <code>aezpz/api.py</code> <pre><code>def load_config(config_file: str, verbose: bool=True, sandbox: str='prod') -&gt; Api:\n\"\"\" Initialize the api from a config file\n    Examples:\n        &gt;&gt;&gt; import aezpz\n        &gt;&gt;&gt; api = aezpz.load_config(\"auth.json\")\n    Args:\n        config_file: The filepath of your json config file that you downloaded from AEP\n        verbose: Whether to print the status code of every request. Defaults to True\n        sandbox: The name of the sandbox to use. Defaults to 'prod'\n    Returns:\n        The initialized api interface\n    \"\"\"\nreturn Api(config_file, verbose=verbose, sandbox=sandbox)\n</code></pre>"},{"location":"reference/#aezpz.api.Api","title":"<code>Api</code>","text":"<p>The main interface to the Adobe XDM API</p> <p>Attributes:</p> Name Type Description <code>base_url</code> <code>str</code> <p>The base url of the Adobe XDM API. Defaults to 'https://platform.adobe.io'</p> <code>headers</code> <code>dict</code> <p>The default headers to be sent with every request.</p> <code>verbose</code> <code>bool</code> <p>Whether to print the status code of every request. Defaults to True</p> <code>sandbox</code> <code>str</code> <p>The name of the sandbox to use. Defaults to 'prod'</p> <code>registry</code> <code>ResourceCollection</code> <p>A collection of all resources in all containers</p> <code>global_registry</code> <code>ResourceCollection</code> <p>A collection of all resources in the global container</p> <code>tenant_registry</code> <code>ResourceCollection</code> <p>A collection of all resources in the tenant container</p> <code>schemas</code> <code>SchemaCollection</code> <p>A collection of all schemas in the tenant container</p> <code>global_schemas</code> <code>SchemaCollection</code> <p>A collection of all schemas in the global container</p> <code>tenant_schemas</code> <code>SchemaCollection</code> <p>A collection of all schemas in the tenant container</p> <code>classes</code> <code>ClassCollection</code> <p>A collection of all classes in the tenant container</p> <code>global_classes</code> <code>ClassCollection</code> <p>A collection of all classes in the global container</p> <code>tenant_classes</code> <code>ClassCollection</code> <p>A collection of all classes in the tenant container</p> <code>field_groups</code> <code>FieldGroupCollection</code> <p>A collection of all field groups in the tenant container</p> <code>global_field_groups</code> <code>FieldGroupCollection</code> <p>A collection of all field groups in the global container</p> <code>tenant_field_groups</code> <code>FieldGroupCollection</code> <p>A collection of all field groups in the tenant container</p> <code>data_types</code> <code>DataTypeCollection</code> <p>A collection of all data types in the tenant container</p> <code>global_data_types</code> <code>DataTypeCollection</code> <p>A collection of all data types in the global container</p> <code>tenant_data_types</code> <code>DataTypeCollection</code> <p>A collection of all data types in the tenant container</p> <code>behaviors</code> <code>BehaviorCollection</code> <p>A collection of all behaviors in the tenant container</p> <p>Methods:</p> Name Description <code>ref</code> <p>Retrieves the value associated with the given reference.</p> <code>request</code> <p>The underlying method for all requests to the api.</p> <p>Examples:</p> <p>Set the sandbox to 'stage'</p> <pre><code>&gt;&gt;&gt; api.sandbox = 'stage'\n&gt;&gt;&gt; api.headers\n{ 'x-sandbox-name': 'stage' }\n</code></pre> Source code in <code>aezpz/api.py</code> <pre><code>class Api:\n\"\"\"The main interface to the Adobe XDM API\n    Attributes:\n        base_url: The base url of the Adobe XDM API. Defaults to 'https://platform.adobe.io'\n        headers: The default headers to be sent with every request.\n        verbose: Whether to print the status code of every request. Defaults to True\n        sandbox: The name of the sandbox to use. Defaults to 'prod'\n        registry: A collection of all resources in all containers\n        global_registry: A collection of all resources in the global container\n        tenant_registry: A collection of all resources in the tenant container\n        schemas: A collection of all schemas in the tenant container\n        global_schemas: A collection of all schemas in the global container\n        tenant_schemas: A collection of all schemas in the tenant container\n        classes: A collection of all classes in the tenant container\n        global_classes: A collection of all classes in the global container\n        tenant_classes: A collection of all classes in the tenant container\n        field_groups: A collection of all field groups in the tenant container\n        global_field_groups: A collection of all field groups in the global container\n        tenant_field_groups: A collection of all field groups in the tenant container\n        data_types: A collection of all data types in the tenant container\n        global_data_types: A collection of all data types in the global container\n        tenant_data_types: A collection of all data types in the tenant container\n        behaviors: A collection of all behaviors in the tenant container\n    Methods:\n        ref: Retrieves the value associated with the given reference.\n        request: The underlying method for all requests to the api.\n    Examples:\n        Set the sandbox to 'stage'\n        &gt;&gt;&gt; api.sandbox = 'stage'\n        &gt;&gt;&gt; api.headers\n        { 'x-sandbox-name': 'stage' }\n    \"\"\"\nbase_url: str\nsandbox: str\nverbose: bool\n_access_token: str\n_config: dict\nregistry: schema.ResourceCollection\nglobal_registry: schema.ResourceCollection\ntenant_registry: schema.ResourceCollection\nschemas: schema.SchemaCollection\nglobal_schemas: schema.SchemaCollection\ntenant_schemas: schema.SchemaCollection\nclasses: schema.ClassCollection\nglobal_classes: schema.ClassCollection\ntenant_classes: schema.ClassCollection\nfield_groups: schema.FieldGroupCollection\nglobal_field_groups: schema.FieldGroupCollection\ntenant_field_groups: schema.FieldGroupCollection\ndata_types: schema.DataTypeCollection\nglobal_data_types: schema.DataTypeCollection\ntenant_data_types: schema.DataTypeCollection\nbehaviors: schema.BehaviorCollection\ndatasets: datasets.DatasetCollection\nbatches: datasets.BatchCollection\ndef __init__(self, config_file, verbose=True, sandbox='prod'):\nself.sandbox = sandbox\nself.verbose = verbose\nself.base_url = 'https://platform.adobe.io'\nself._config = self.load_config_file(config_file)\nself._access_token = self.authenticate()\nself.registry = schema.ResourceCollection(self)\nself.global_registry = schema.ResourceCollection(self, container='global')\nself.tenant_registry = schema.ResourceCollection(self, container='tenant')\nself.schemas = schema.SchemaCollection(self)\nself.global_schemas = schema.SchemaCollection(self, container='global')\nself.tenant_schemas = schema.SchemaCollection(self, container='tenant')\nself.classes = schema.ClassCollection(self)\nself.global_classes = schema.ClassCollection(self, container='global')\nself.tenant_classes = schema.ClassCollection(self, container='tenant')\nself.field_groups = schema.FieldGroupCollection(self)\nself.global_field_groups = schema.FieldGroupCollection(self, container='global')\nself.tenant_field_groups = schema.FieldGroupCollection(self, container='tenant')\nself.data_types = schema.DataTypeCollection(self)\nself.global_data_types = schema.DataTypeCollection(self, container='global')\nself.tenant_data_types = schema.DataTypeCollection(self, container='tenant')\nself.behaviors = schema.BehaviorCollection(self)\nself.datasets = datasets.DatasetCollection(self)\nself.batches = datasets.BatchCollection(self)\ndef ref(self, ref: str) -&gt; schema.Resource:\n\"\"\"\n        Retrieves the value associated with the given reference.\n        Args:\n            ref: The `$id` or `meta:altId` of the reference to retrieve.\n        Returns:\n            The value associated with the reference.\n        Examples:\n            &gt;&gt;&gt; api.ref('https://ns.adobe.com/xdm/context/profile')\n            &lt;Class xdm.context.profile&gt;\n            &gt;&gt;&gt; api.ref('_mytenant.schemas.7a5416d135713dae7957')\n            &lt;Schema 7a5416d135713dae7957&gt;\n        \"\"\"\nreturn self.registry.get(ref)\n@property\ndef headers(self) -&gt; dict:\nassert getattr(self, 'config', None) and getattr(self, 'access_token', None), 'need to authenticate first'\nreturn {\n'x-sandbox-name': self.sandbox,\n'x-api-key': self._config['CLIENT_ID'],\n'x-gw-ims-org-id': self._config['ORG_ID'],\n'Authorization': 'Bearer ' + self._access_token,\n}\n@property\ndef me(self) -&gt; str:\nreturn self._config['ACCOUNT_ID']\ndef load_config_file(self, config_file) -&gt; dict:\nconfig = json.load(Path(config_file).open('r'))\nreturn {\n'CLIENT_ID': config['CLIENT_ID'],\n'ORG_ID': config['ORG_ID'],\n'CLIENT_SECRET': config['CLIENT_SECRETS'][0],\n'SCOPES': config['SCOPES'],\n'ORG_ID': config['ORG_ID'],\n'ACCOUNT_ID': config['TECHNICAL_ACCOUNT_ID'],\n}\ndef authenticate(self) -&gt; str:\nr = requests.post('https://ims-na1.adobelogin.com/ims/token/v2', params={\n'grant_type': 'client_credentials',\n'client_id': self._config['CLIENT_ID'],\n'client_secret': self._config['CLIENT_SECRET'],\n'scope': ','.join(self._config['SCOPES'])\n})\nr.raise_for_status()\nreturn r.json()['access_token']\ndef request(self, method, path, headers={}, **kwargs) -&gt; Optional[dict]:\n\"\"\"\n        The underlying method for all requests to the api. Wraps the requests library.\n        Args:\n            method (str): The HTTP method to use for the request (e.g., 'GET', 'POST', 'PUT', 'DELETE').\n            path (str): The path of the resource to request.\n            headers (dict, optional): Additional headers to include in the request. Defaults to an empty dictionary.\n            **kwargs: Additional keyword arguments to pass to the underlying requests library.\n        Returns:\n            dict: The JSON response from the server, if any.\n        Raises:\n            requests.exceptions.HTTPError: If the response status code indicates an error.\n        Examples:\n            &gt;&gt;&gt; api.request('GET', '/data/foundation/schemaregistry/global/behaviors', headers={'Accept': 'application/vnd.adobe.xed-id+json'})\n            { \"results\": [{ \"$id\": \"https://ns.adobe.com/xdm/data/time-series\" }, ...], \"_page\": { \"count\": 3 } }\n        \"\"\"\nassert 'Authorization' in self.headers, 'need to load_config first'\nr = requests.request(\nmethod=method,\nurl=self.base_url+path,\nheaders={\n**self.headers,\n**headers,\n},\n**kwargs,\n)\nif self.verbose:\nprint(r.status_code, r.request.method, r.request.path_url)\nif not r.ok:\ntry:\nerror = r.json()\nif 'title' in error:\nprint(error['title'])\nif 'detail' in error:\nprint(error['detail'])\nexcept:\nprint(r.text)\nr.raise_for_status()\nif len(r.content):\nreturn r.json()\n</code></pre>"},{"location":"reference/#aezpz.api.Api.ref","title":"<code>ref(ref)</code>","text":"<p>Retrieves the value associated with the given reference.</p> <p>Parameters:</p> Name Type Description Default <code>ref</code> <code>str</code> <p>The <code>$id</code> or <code>meta:altId</code> of the reference to retrieve.</p> required <p>Returns:</p> Type Description <code>Resource</code> <p>The value associated with the reference.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.ref('https://ns.adobe.com/xdm/context/profile')\n&lt;Class xdm.context.profile&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; api.ref('_mytenant.schemas.7a5416d135713dae7957')\n&lt;Schema 7a5416d135713dae7957&gt;\n</code></pre> Source code in <code>aezpz/api.py</code> <pre><code>def ref(self, ref: str) -&gt; schema.Resource:\n\"\"\"\n    Retrieves the value associated with the given reference.\n    Args:\n        ref: The `$id` or `meta:altId` of the reference to retrieve.\n    Returns:\n        The value associated with the reference.\n    Examples:\n        &gt;&gt;&gt; api.ref('https://ns.adobe.com/xdm/context/profile')\n        &lt;Class xdm.context.profile&gt;\n        &gt;&gt;&gt; api.ref('_mytenant.schemas.7a5416d135713dae7957')\n        &lt;Schema 7a5416d135713dae7957&gt;\n    \"\"\"\nreturn self.registry.get(ref)\n</code></pre>"},{"location":"reference/#aezpz.api.Api.request","title":"<code>request(method, path, headers={}, **kwargs)</code>","text":"<p>The underlying method for all requests to the api. Wraps the requests library.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The HTTP method to use for the request (e.g., 'GET', 'POST', 'PUT', 'DELETE').</p> required <code>path</code> <code>str</code> <p>The path of the resource to request.</p> required <code>headers</code> <code>dict</code> <p>Additional headers to include in the request. Defaults to an empty dictionary.</p> <code>{}</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the underlying requests library.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>Optional[dict]</code> <p>The JSON response from the server, if any.</p> <p>Raises:</p> Type Description <code>HTTPError</code> <p>If the response status code indicates an error.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.request('GET', '/data/foundation/schemaregistry/global/behaviors', headers={'Accept': 'application/vnd.adobe.xed-id+json'})\n{ \"results\": [{ \"$id\": \"https://ns.adobe.com/xdm/data/time-series\" }, ...], \"_page\": { \"count\": 3 } }\n</code></pre> Source code in <code>aezpz/api.py</code> <pre><code>def request(self, method, path, headers={}, **kwargs) -&gt; Optional[dict]:\n\"\"\"\n    The underlying method for all requests to the api. Wraps the requests library.\n    Args:\n        method (str): The HTTP method to use for the request (e.g., 'GET', 'POST', 'PUT', 'DELETE').\n        path (str): The path of the resource to request.\n        headers (dict, optional): Additional headers to include in the request. Defaults to an empty dictionary.\n        **kwargs: Additional keyword arguments to pass to the underlying requests library.\n    Returns:\n        dict: The JSON response from the server, if any.\n    Raises:\n        requests.exceptions.HTTPError: If the response status code indicates an error.\n    Examples:\n        &gt;&gt;&gt; api.request('GET', '/data/foundation/schemaregistry/global/behaviors', headers={'Accept': 'application/vnd.adobe.xed-id+json'})\n        { \"results\": [{ \"$id\": \"https://ns.adobe.com/xdm/data/time-series\" }, ...], \"_page\": { \"count\": 3 } }\n    \"\"\"\nassert 'Authorization' in self.headers, 'need to load_config first'\nr = requests.request(\nmethod=method,\nurl=self.base_url+path,\nheaders={\n**self.headers,\n**headers,\n},\n**kwargs,\n)\nif self.verbose:\nprint(r.status_code, r.request.method, r.request.path_url)\nif not r.ok:\ntry:\nerror = r.json()\nif 'title' in error:\nprint(error['title'])\nif 'detail' in error:\nprint(error['detail'])\nexcept:\nprint(r.text)\nr.raise_for_status()\nif len(r.content):\nreturn r.json()\n</code></pre>"},{"location":"reference/#aezpz.schema.ResourceCollection","title":"<code>ResourceCollection</code>","text":"<p>Base class for all resource collections.  Can be used directly through the <code>registry</code> attribute of the API Instance to retrieve resources of any type</p> <p>Methods:</p> Name Description <code>get</code> <p>Retrieves a resource based on the provided reference.</p> <code>find</code> <p>Finds a resource based on the specified parameters.</p> <code>list</code> <p>Finds all resources based on the specified parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.registry.list()\n[&lt;Class xdm.classes.summarymetrics&gt;, &lt;Schema 7a5416d13571&gt;, ...]\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>class ResourceCollection:\n\"\"\" Base class for all resource collections. \n    Can be used directly through the `registry` attribute of the API Instance to\n    retrieve resources of any type\n    Methods:\n        get: Retrieves a resource based on the provided reference.\n        find: Finds a resource based on the specified parameters.\n        list: Finds all resources based on the specified parameters.\n    Examples:\n        &gt;&gt;&gt; api.registry.list()\n        [&lt;Class xdm.classes.summarymetrics&gt;, &lt;Schema 7a5416d13571&gt;, ...]\n    \"\"\"\napi: Api\ncontainer: Optional[Container]\nresources: list[ResourceType]\ndef __init__(self, api: Api, container:Optional[Container]=None, resources:list[ResourceType]=[]):\nself.api = api\nif len(resources) == 0:\nresources = [\nResourceType.DATA_TYPE,\nResourceType.FIELD_GROUP,\nResourceType.SCHEMA,\nResourceType.CLASS,\nResourceType.BEHAVIOR,\n]\nassert container is None or container in ('global','tenant')\nfor resource in resources:\nassert isinstance(resource, ResourceType)\nself.resources = resources\nself.container = container\n@cached_property\ndef containers(self) -&gt; list[Container]:\ncontainers = ['tenant','global']\nif self.container is not None:\ncontainers = [ self.container ]\nreturn containers\ndef get(self, ref: str) -&gt; Resource:\n\"\"\"\n        Retrieves a resource based on the provided reference.\n        Args:\n            ref: The `$id` or `meta:altId` of the reference to retrieve.\n        Returns:\n            Resource: The retrieved resource.\n        \"\"\"\nref = SchemaRef(ref)\nassert ref.resource in self.resources\nreturn ref.init(self.api)\ndef find(self,\nfull: bool = True,\n**params) -&gt; Resource:\n\"\"\"\n        Finds a resource based on the specified parameters.\n        Args:\n            full: If True will use `vnd.adobe.xed-full+json` accept header.\n            **params: Additional parameters for filtering the resources.\n        Returns:\n            Resource: The found resource.\n        Raises:\n            Exception: If no resource is found or multiple resources match the parameters.\n        Examples:\n            &gt;&gt;&gt; api.registry.find(title='My Schema')\n            &lt;Schema 7a5416d13571 title=\"My Schema\" version=\"1.0\"&gt;\n        \"\"\"\nresources = self.list(full=full, **params)\nif len(resources) == 0:\nraise Exception(f'Could not find resource')\nif len(resources) &gt; 1:\nraise Exception(f'Multiple resources match the parameters')\nreturn resources[0]\ndef _paginate(self, container, resource, full: bool = False, query: dict = {}) -&gt; list[dict]:\nrecords = []\nparams = {}\nif len(query):\nparams['property'] = ','.join(\nk + '==' + v\nfor k,v in query.items()\n)\nmore = True\nwhile more:\nr = self.api.request('GET',\npath=get_resource_path(container, resource),\nheaders=get_accept_header(\nxed='full' if full else None,\nxed_version=None\n),\nparams=params)\nrecords += r['results']\nif r['_page'].get('next') is not None:\nparams['start'] = r['_page']['next']\nelse:\nmore = False\nreturn records\ndef list(self,\nfull: bool = False,\n**query\n) -&gt; list[Resource]:\n\"\"\"\n        Finds all resources based on the specified parameters.\n        Args:\n            full: If True will use `vnd.adobe.xed-full+json` accept header. Defaults to True.\n            **query: Additional query parameters for filtering the resources.\n        Returns:\n            List[Resource]: The list of found resources.\n        Examples:\n            &gt;&gt;&gt; api.registry.list()\n            [&lt;Class xdm.classes.summarymetrics&gt;, &lt;Schema 7a5416d13571&gt;, ...]\n        \"\"\"\nresults = []\nfor resource in self.resources:\nfor container in self.containers:\nfor record in self._paginate(container, resource, full, query=query):\nresults.append(resource._class(self.api, record))\nreturn results\ndef _create(self, body) -&gt; Resource:\nif self.container == 'global':\nraise Exception('cannot create global resource')\nassert len(self.resources) == 1\nr = self.api.request('POST',\npath=get_resource_path(\ncontainer='tenant',\nresource=self.resources[0],\n),\nheaders=get_accept_header(),\njson=body\n)\nreturn self.resources[0]._class(self.api, r)\n</code></pre>"},{"location":"reference/#aezpz.schema.ResourceCollection.get","title":"<code>get(ref)</code>","text":"<p>Retrieves a resource based on the provided reference.</p> <p>Parameters:</p> Name Type Description Default <code>ref</code> <code>str</code> <p>The <code>$id</code> or <code>meta:altId</code> of the reference to retrieve.</p> required <p>Returns:</p> Name Type Description <code>Resource</code> <code>Resource</code> <p>The retrieved resource.</p> Source code in <code>aezpz/schema.py</code> <pre><code>def get(self, ref: str) -&gt; Resource:\n\"\"\"\n    Retrieves a resource based on the provided reference.\n    Args:\n        ref: The `$id` or `meta:altId` of the reference to retrieve.\n    Returns:\n        Resource: The retrieved resource.\n    \"\"\"\nref = SchemaRef(ref)\nassert ref.resource in self.resources\nreturn ref.init(self.api)\n</code></pre>"},{"location":"reference/#aezpz.schema.ResourceCollection.find","title":"<code>find(full=True, **params)</code>","text":"<p>Finds a resource based on the specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>full</code> <code>bool</code> <p>If True will use <code>vnd.adobe.xed-full+json</code> accept header.</p> <code>True</code> <code>**params</code> <p>Additional parameters for filtering the resources.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Resource</code> <code>Resource</code> <p>The found resource.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If no resource is found or multiple resources match the parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.registry.find(title='My Schema')\n&lt;Schema 7a5416d13571 title=\"My Schema\" version=\"1.0\"&gt;\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>def find(self,\nfull: bool = True,\n**params) -&gt; Resource:\n\"\"\"\n    Finds a resource based on the specified parameters.\n    Args:\n        full: If True will use `vnd.adobe.xed-full+json` accept header.\n        **params: Additional parameters for filtering the resources.\n    Returns:\n        Resource: The found resource.\n    Raises:\n        Exception: If no resource is found or multiple resources match the parameters.\n    Examples:\n        &gt;&gt;&gt; api.registry.find(title='My Schema')\n        &lt;Schema 7a5416d13571 title=\"My Schema\" version=\"1.0\"&gt;\n    \"\"\"\nresources = self.list(full=full, **params)\nif len(resources) == 0:\nraise Exception(f'Could not find resource')\nif len(resources) &gt; 1:\nraise Exception(f'Multiple resources match the parameters')\nreturn resources[0]\n</code></pre>"},{"location":"reference/#aezpz.schema.ResourceCollection.list","title":"<code>list(full=False, **query)</code>","text":"<p>Finds all resources based on the specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>full</code> <code>bool</code> <p>If True will use <code>vnd.adobe.xed-full+json</code> accept header. Defaults to True.</p> <code>False</code> <code>**query</code> <p>Additional query parameters for filtering the resources.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Resource]</code> <p>List[Resource]: The list of found resources.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.registry.list()\n[&lt;Class xdm.classes.summarymetrics&gt;, &lt;Schema 7a5416d13571&gt;, ...]\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>def list(self,\nfull: bool = False,\n**query\n) -&gt; list[Resource]:\n\"\"\"\n    Finds all resources based on the specified parameters.\n    Args:\n        full: If True will use `vnd.adobe.xed-full+json` accept header. Defaults to True.\n        **query: Additional query parameters for filtering the resources.\n    Returns:\n        List[Resource]: The list of found resources.\n    Examples:\n        &gt;&gt;&gt; api.registry.list()\n        [&lt;Class xdm.classes.summarymetrics&gt;, &lt;Schema 7a5416d13571&gt;, ...]\n    \"\"\"\nresults = []\nfor resource in self.resources:\nfor container in self.containers:\nfor record in self._paginate(container, resource, full, query=query):\nresults.append(resource._class(self.api, record))\nreturn results\n</code></pre>"},{"location":"reference/#aezpz.schema.SchemaCollection","title":"<code>SchemaCollection</code>","text":"<p>             Bases: <code>ResourceCollection</code></p> <p>Collection of Schema resources.</p> <p>Initialized through <code>api.schemas</code>, <code>api.global_schemas</code>, or <code>api.tenant_schemas</code>.</p> <p>Methods:</p> Name Description <code>get</code> <p>Retrieves a schema based on the provided reference.</p> <code>find</code> <p>Finds a schema based on the specified parameters.</p> <code>list</code> <p>Finds all schemas based on the specified parameters.</p> <code>create</code> <p>Creates a new schema.</p> <p>Examples:</p> <p>Get a schema by reference</p> <pre><code>&gt;&gt;&gt; api.schemas.get('_mytenant.schemas.7a5416d13572')\n&lt;Schema 7a5416d13572 title=\"My Schema\" version=\"1.0\"&gt;\n</code></pre> <p>Find a schema by title</p> <pre><code>&gt;&gt;&gt; api.tenant_schemas.find(title='My Schema')\n&lt;Schema 7a5416d13572 title=\"My Schema\" version=\"1.0\"&gt;\n</code></pre> <p>List all global and tenant schemas</p> <pre><code>&gt;&gt;&gt; api.schemas.list()\n[&lt;Schema xdm.schemas.computed-attributes&gt;, &lt;Schema 7a5416d13572&gt;, ...]\n</code></pre> <p>List all global schemas</p> <pre><code>&gt;&gt;&gt; api.global_schemas.list()\n[&lt;Schema xdm.schemas.computed-attributes&gt;, &lt;Schema xdm.schemas.consentidmap&gt;, ...]\n</code></pre> <p>List all tenant schemas</p> <pre><code>&gt;&gt;&gt; api.tenant_schemas.list()\n[&lt;Schema 7a5416d13572&gt;, &lt;Schema 7a5416d13571&gt;, ...]\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>class SchemaCollection(ResourceCollection):\n\"\"\" Collection of Schema resources.\n    Initialized through `api.schemas`, `api.global_schemas`, or `api.tenant_schemas`.\n    Methods:\n        get: Retrieves a schema based on the provided reference.\n        find: Finds a schema based on the specified parameters.\n        list: Finds all schemas based on the specified parameters.\n        create: Creates a new schema.\n    Examples:\n        Get a schema by reference\n        &gt;&gt;&gt; api.schemas.get('_mytenant.schemas.7a5416d13572')\n        &lt;Schema 7a5416d13572 title=\"My Schema\" version=\"1.0\"&gt;\n        Find a schema by title\n        &gt;&gt;&gt; api.tenant_schemas.find(title='My Schema')\n        &lt;Schema 7a5416d13572 title=\"My Schema\" version=\"1.0\"&gt;\n        List all global and tenant schemas\n        &gt;&gt;&gt; api.schemas.list()\n        [&lt;Schema xdm.schemas.computed-attributes&gt;, &lt;Schema 7a5416d13572&gt;, ...]\n        List all global schemas\n        &gt;&gt;&gt; api.global_schemas.list()\n        [&lt;Schema xdm.schemas.computed-attributes&gt;, &lt;Schema xdm.schemas.consentidmap&gt;, ...]\n        List all tenant schemas\n        &gt;&gt;&gt; api.tenant_schemas.list()\n        [&lt;Schema 7a5416d13572&gt;, &lt;Schema 7a5416d13571&gt;, ...]\n    \"\"\"\ndef __init__(self, api: Api, container:Optional[Container]=None):\nsuper().__init__(api, container=container, resources=[ResourceType.SCHEMA])\ndef get(self, id) -&gt; Schema:\nreturn super().get(id)\ndef find(self, full:bool=True, **params) -&gt; Schema:\nreturn super().find(full, **params)\ndef list(self, full:bool=False, **params) -&gt; list[Schema]:\nreturn super().list(full, **params)\ndef create(\nself,\ntitle: str,\nparent: Class,\ndescription: str='',\nfield_groups: list[FieldGroup] = [],\n) -&gt; Schema:\n\"\"\"\n        Create a new schema.\n        Args:\n            title: The title of the schema.\n            parent: The parent class that the schema inherits from.\n            description: The description of the schema.\n            field_groups: The list of field groups for the schema.\n        Returns:\n            Schema: The created schema.\n        Examples:\n            &gt;&gt;&gt; schema = api.schemas.create(\n            ...     title='My Schema',\n            ...     parent=api.classes.get('_xdm.context.profile'),\n            ...     description='My test schema',\n            ...     field_groups=[api.field_groups.get('_mytenant.mixins.f7d78220431')]\n            ... )\n        \"\"\"\nassert isinstance(parent, Class), 'Must inherit from a class'\nfor field_group in field_groups:\nassert isinstance(field_group, FieldGroup)\nreturn self._create({\n'type': 'object',\n'title': title,\n'description': description,\n'allOf': [\n{ '$ref': ref.ref }\nfor ref in ([parent] + field_groups)\n]\n})\n</code></pre>"},{"location":"reference/#aezpz.schema.SchemaCollection.create","title":"<code>create(title, parent, description='', field_groups=[])</code>","text":"<p>Create a new schema.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the schema.</p> required <code>parent</code> <code>Class</code> <p>The parent class that the schema inherits from.</p> required <code>description</code> <code>str</code> <p>The description of the schema.</p> <code>''</code> <code>field_groups</code> <code>list[FieldGroup]</code> <p>The list of field groups for the schema.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Schema</code> <code>Schema</code> <p>The created schema.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; schema = api.schemas.create(\n...     title='My Schema',\n...     parent=api.classes.get('_xdm.context.profile'),\n...     description='My test schema',\n...     field_groups=[api.field_groups.get('_mytenant.mixins.f7d78220431')]\n... )\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>def create(\nself,\ntitle: str,\nparent: Class,\ndescription: str='',\nfield_groups: list[FieldGroup] = [],\n) -&gt; Schema:\n\"\"\"\n    Create a new schema.\n    Args:\n        title: The title of the schema.\n        parent: The parent class that the schema inherits from.\n        description: The description of the schema.\n        field_groups: The list of field groups for the schema.\n    Returns:\n        Schema: The created schema.\n    Examples:\n        &gt;&gt;&gt; schema = api.schemas.create(\n        ...     title='My Schema',\n        ...     parent=api.classes.get('_xdm.context.profile'),\n        ...     description='My test schema',\n        ...     field_groups=[api.field_groups.get('_mytenant.mixins.f7d78220431')]\n        ... )\n    \"\"\"\nassert isinstance(parent, Class), 'Must inherit from a class'\nfor field_group in field_groups:\nassert isinstance(field_group, FieldGroup)\nreturn self._create({\n'type': 'object',\n'title': title,\n'description': description,\n'allOf': [\n{ '$ref': ref.ref }\nfor ref in ([parent] + field_groups)\n]\n})\n</code></pre>"},{"location":"reference/#aezpz.schema.ClassCollection","title":"<code>ClassCollection</code>","text":"<p>             Bases: <code>ResourceCollection</code></p> <p>Collection of Class resources.</p> <p>Initialized through <code>api.classes</code>, <code>api.global_classes</code>, or <code>api.tenant_classes</code>.</p> <p>Methods:</p> Name Description <code>get</code> <p>Retrieves a class based on the provided reference.</p> <code>find</code> <p>Finds a class based on the specified parameters.</p> <code>list</code> <p>Finds all classes based on the specified parameters.</p> <code>create</code> <p>Creates a new class.</p> <p>Examples:</p> <p>Get a class by reference</p> <pre><code>&gt;&gt;&gt; api.classes.get('_mytenant.classes.7a5416d13572')\n&lt;Class 7a5416d13572 title=\"My Class\" version=\"1.0\"&gt;\n</code></pre> <p>Find a class by title</p> <pre><code>&gt;&gt;&gt; api.tenant_classes.find(title='My Class')\n&lt;Class 7a5416d13572 title=\"My Class\" version=\"1.0\"&gt;\n</code></pre> <p>List all global and tenant classes</p> <pre><code>&gt;&gt;&gt; api.classes.list()\n[&lt;Class xdm.context.profile&gt;, &lt;Class 7a5416d13572&gt;, ...]\n</code></pre> <p>List all global classes</p> <pre><code>&gt;&gt;&gt; api.global_classes.list()\n[&lt;Class xdm.context.profile&gt;, &lt;Class xdm.classes.conversion&gt;, ...]\n</code></pre> <p>List all tenant classes</p> <pre><code>&gt;&gt;&gt; api.tenant_classes.list()\n[&lt;Class 7a5416d13572&gt;, &lt;Class 7a5416d13571&gt;, ...]\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>class ClassCollection(ResourceCollection):\n\"\"\" Collection of Class resources.\n    Initialized through `api.classes`, `api.global_classes`, or `api.tenant_classes`.\n    Methods:\n        get: Retrieves a class based on the provided reference.\n        find: Finds a class based on the specified parameters.\n        list: Finds all classes based on the specified parameters.\n        create: Creates a new class.\n    Examples:\n        Get a class by reference\n        &gt;&gt;&gt; api.classes.get('_mytenant.classes.7a5416d13572')\n        &lt;Class 7a5416d13572 title=\"My Class\" version=\"1.0\"&gt;\n        Find a class by title\n        &gt;&gt;&gt; api.tenant_classes.find(title='My Class')\n        &lt;Class 7a5416d13572 title=\"My Class\" version=\"1.0\"&gt;\n        List all global and tenant classes\n        &gt;&gt;&gt; api.classes.list()\n        [&lt;Class xdm.context.profile&gt;, &lt;Class 7a5416d13572&gt;, ...]\n        List all global classes\n        &gt;&gt;&gt; api.global_classes.list()\n        [&lt;Class xdm.context.profile&gt;, &lt;Class xdm.classes.conversion&gt;, ...]\n        List all tenant classes\n        &gt;&gt;&gt; api.tenant_classes.list()\n        [&lt;Class 7a5416d13572&gt;, &lt;Class 7a5416d13571&gt;, ...]\n    \"\"\"\ndef __init__(self, api: Api, container:Optional[Container]=None):\nsuper().__init__(api, container=container, resources=[ResourceType.CLASS])\ndef get(self, id) -&gt; Class:\nreturn super().get(id)\ndef find(self, full:bool=True, **params) -&gt; Class:\nreturn super().find(full, **params)\ndef list(self, full:bool=False, **params) -&gt; list[Class]:\nreturn super().list(full, **params)\n# TODO: also allow direct definitions of fields\n# TODO: make behavior default to \"adhoc\" if field_groups have been defined\ndef create(\nself,\ntitle: str,\nbehavior: Behavior,\ndescription: str = '',\nfield_groups: list[FieldGroup] = [],\n) -&gt; Class:\n\"\"\"\n        Create a new class.\n        Args:\n            title: The title of the class.\n            behavior: The behavior of the class.\n            description: The description of the class.\n            field_groups: The list of field groups for the class.\n        Returns:\n            Class: The created class.\n        Examples:\n            &gt;&gt;&gt; my_class = api.classes.create(\n            ...     title='My Class',\n            ...     behavior=api.behaviors.adhoc,\n            ...     description='My test class',\n            ...     field_groups=[api.field_groups.get('_mytenant.mixins.f7d78220431')]\n            ... )\n        \"\"\"\nassert isinstance(behavior, Behavior), 'Must inherit from a behavior'\nfor field_group in field_groups:\nassert isinstance(field_group, FieldGroup)\nreturn self._create({\n'type': 'object',\n'title': title,\n'description': description,\n'allOf': [\n{ '$ref': ref.ref }\nfor ref in ([behavior] + field_groups)\n]\n})\n</code></pre>"},{"location":"reference/#aezpz.schema.ClassCollection.create","title":"<code>create(title, behavior, description='', field_groups=[])</code>","text":"<p>Create a new class.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the class.</p> required <code>behavior</code> <code>Behavior</code> <p>The behavior of the class.</p> required <code>description</code> <code>str</code> <p>The description of the class.</p> <code>''</code> <code>field_groups</code> <code>list[FieldGroup]</code> <p>The list of field groups for the class.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Class</code> <code>Class</code> <p>The created class.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; my_class = api.classes.create(\n...     title='My Class',\n...     behavior=api.behaviors.adhoc,\n...     description='My test class',\n...     field_groups=[api.field_groups.get('_mytenant.mixins.f7d78220431')]\n... )\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>def create(\nself,\ntitle: str,\nbehavior: Behavior,\ndescription: str = '',\nfield_groups: list[FieldGroup] = [],\n) -&gt; Class:\n\"\"\"\n    Create a new class.\n    Args:\n        title: The title of the class.\n        behavior: The behavior of the class.\n        description: The description of the class.\n        field_groups: The list of field groups for the class.\n    Returns:\n        Class: The created class.\n    Examples:\n        &gt;&gt;&gt; my_class = api.classes.create(\n        ...     title='My Class',\n        ...     behavior=api.behaviors.adhoc,\n        ...     description='My test class',\n        ...     field_groups=[api.field_groups.get('_mytenant.mixins.f7d78220431')]\n        ... )\n    \"\"\"\nassert isinstance(behavior, Behavior), 'Must inherit from a behavior'\nfor field_group in field_groups:\nassert isinstance(field_group, FieldGroup)\nreturn self._create({\n'type': 'object',\n'title': title,\n'description': description,\n'allOf': [\n{ '$ref': ref.ref }\nfor ref in ([behavior] + field_groups)\n]\n})\n</code></pre>"},{"location":"reference/#aezpz.schema.FieldGroupCollection","title":"<code>FieldGroupCollection</code>","text":"<p>             Bases: <code>ResourceCollection</code></p> <p>Collection of FieldGroup resources.</p> <p>Initialized through <code>api.field_groups</code>, <code>api.global_field_groups</code>, or <code>api.tenant_field_groups</code>.</p> <p>Methods:</p> Name Description <code>get</code> <p>Retrieves a field group based on the provided reference.</p> <code>find</code> <p>Finds a field group based on the specified parameters.</p> <code>list</code> <p>Finds all field groups based on the specified parameters.</p> <code>create</code> <p>Creates a new field group.</p> <p>Examples:</p> <p>Get a field group by reference</p> <pre><code>&gt;&gt;&gt; api.field_groups.get('_mytenant.field_groups.7a5416d13572')\n&lt;FieldGroup 7a5416d13572 title=\"My Field Group\" version=\"1.0\"&gt;\n</code></pre> <p>Find a field group by title</p> <pre><code>&gt;&gt;&gt; api.tenant_field_groups.find(title='My Field Group')\n&lt;FieldGroup 7a5416d13572 title=\"My Field Group\" version=\"1.0\"&gt;\n</code></pre> <p>List all global and tenant field groups</p> <pre><code>&gt;&gt;&gt; api.field_groups.list()\n[&lt;FieldGroup xdm.context.identitymap&gt;, &lt;FieldGroup 7a5416d13572&gt;, ...]\n</code></pre> <p>List all global field groups</p> <pre><code>&gt;&gt;&gt; api.global_field_groups.list()\n[&lt;FieldGroup xdm.context.identitymap&gt;, &lt;FieldGroup xdm.mixins.current-weather&gt;, ...]\n</code></pre> <p>List all tenant field groups</p> <pre><code>&gt;&gt;&gt; api.tenant_field_groups.list()\n[&lt;FieldGroup 7a5416d13572&gt;, &lt;FieldGroup 7a5416d13571&gt;, ...]\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>class FieldGroupCollection(ResourceCollection):\n\"\"\" Collection of FieldGroup resources.\n    Initialized through `api.field_groups`, `api.global_field_groups`, or `api.tenant_field_groups`.\n    Methods:\n        get: Retrieves a field group based on the provided reference.\n        find: Finds a field group based on the specified parameters.\n        list: Finds all field groups based on the specified parameters.\n        create: Creates a new field group.\n    Examples:\n        Get a field group by reference\n        &gt;&gt;&gt; api.field_groups.get('_mytenant.field_groups.7a5416d13572')\n        &lt;FieldGroup 7a5416d13572 title=\"My Field Group\" version=\"1.0\"&gt;\n        Find a field group by title\n        &gt;&gt;&gt; api.tenant_field_groups.find(title='My Field Group')\n        &lt;FieldGroup 7a5416d13572 title=\"My Field Group\" version=\"1.0\"&gt;\n        List all global and tenant field groups\n        &gt;&gt;&gt; api.field_groups.list()\n        [&lt;FieldGroup xdm.context.identitymap&gt;, &lt;FieldGroup 7a5416d13572&gt;, ...]\n        List all global field groups\n        &gt;&gt;&gt; api.global_field_groups.list()\n        [&lt;FieldGroup xdm.context.identitymap&gt;, &lt;FieldGroup xdm.mixins.current-weather&gt;, ...]\n        List all tenant field groups\n        &gt;&gt;&gt; api.tenant_field_groups.list()\n        [&lt;FieldGroup 7a5416d13572&gt;, &lt;FieldGroup 7a5416d13571&gt;, ...]\n    \"\"\"\ndef __init__(self, api: Api, container:Optional[Container]=None):\nsuper().__init__(api, container=container, resources=[ResourceType.FIELD_GROUP])\ndef get(self, id) -&gt; FieldGroup:\nreturn super().get(id)\ndef find(self, full:bool=True, **params) -&gt; FieldGroup:\nreturn super().find(full, **params)\ndef list(self, full:bool=False, **params) -&gt; list[FieldGroup]:\nreturn super().list(full, **params)\ndef create(self,\ntitle: str,\ndescription: str = '',\nproperties: dict[str, dict] = {},\nintendedToExtend: list[Resource] = [],\n) -&gt; FieldGroup:\n\"\"\"\n        Create a new field group.\n        Args:\n            title: The title of the field group.\n            description: The description of the field group.\n            properties: The properties of the field group.\n            intendedToExtend: The resources this field group intends to extend.\n        Returns:\n            FieldGroup: The created field group.\n        Examples:\n            &gt;&gt;&gt; field_group = api.field_groups.create(\n            ...     title='My Field Group',\n            ...     description='My test field group',\n            ...     properties={\n            ...         '_mytenant': {\n            ...             'type': 'object',\n            ...             'properties': {\n            ...                 'is_super_star': {'type': 'boolean'},\n            ...             }\n            ...         },\n            ...     }\n            ...     intendedToExtend=[api.classes.get('_xdm.context.profile')],\n            ... )\n        \"\"\"\nfor r in intendedToExtend:\nassert isinstance(r, Resource)\nreturn self._create({\n'type': 'object',\n'title': title,\n'description': description,\n'meta:intendedToExtend': [ ctx.ref for ctx in intendedToExtend ],\n'allOf': [{\n'properties': properties,\n}]\n})\n</code></pre>"},{"location":"reference/#aezpz.schema.FieldGroupCollection.create","title":"<code>create(title, description='', properties={}, intendedToExtend=[])</code>","text":"<p>Create a new field group.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the field group.</p> required <code>description</code> <code>str</code> <p>The description of the field group.</p> <code>''</code> <code>properties</code> <code>dict[str, dict]</code> <p>The properties of the field group.</p> <code>{}</code> <code>intendedToExtend</code> <code>list[Resource]</code> <p>The resources this field group intends to extend.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>FieldGroup</code> <code>FieldGroup</code> <p>The created field group.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; field_group = api.field_groups.create(\n...     title='My Field Group',\n...     description='My test field group',\n...     properties={\n...         '_mytenant': {\n...             'type': 'object',\n...             'properties': {\n...                 'is_super_star': {'type': 'boolean'},\n...             }\n...         },\n...     }\n...     intendedToExtend=[api.classes.get('_xdm.context.profile')],\n... )\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>def create(self,\ntitle: str,\ndescription: str = '',\nproperties: dict[str, dict] = {},\nintendedToExtend: list[Resource] = [],\n) -&gt; FieldGroup:\n\"\"\"\n    Create a new field group.\n    Args:\n        title: The title of the field group.\n        description: The description of the field group.\n        properties: The properties of the field group.\n        intendedToExtend: The resources this field group intends to extend.\n    Returns:\n        FieldGroup: The created field group.\n    Examples:\n        &gt;&gt;&gt; field_group = api.field_groups.create(\n        ...     title='My Field Group',\n        ...     description='My test field group',\n        ...     properties={\n        ...         '_mytenant': {\n        ...             'type': 'object',\n        ...             'properties': {\n        ...                 'is_super_star': {'type': 'boolean'},\n        ...             }\n        ...         },\n        ...     }\n        ...     intendedToExtend=[api.classes.get('_xdm.context.profile')],\n        ... )\n    \"\"\"\nfor r in intendedToExtend:\nassert isinstance(r, Resource)\nreturn self._create({\n'type': 'object',\n'title': title,\n'description': description,\n'meta:intendedToExtend': [ ctx.ref for ctx in intendedToExtend ],\n'allOf': [{\n'properties': properties,\n}]\n})\n</code></pre>"},{"location":"reference/#aezpz.schema.DataTypeCollection","title":"<code>DataTypeCollection</code>","text":"<p>             Bases: <code>ResourceCollection</code></p> <p>Collection of DataType resources.</p> <p>Initialized through <code>api.data_types</code>, <code>api.global_data_types</code>, or <code>api.tenant_data_types</code>.</p> <p>Methods:</p> Name Description <code>get</code> <p>Retrieves a data type based on the provided reference.</p> <code>find</code> <p>Finds a data type based on the specified parameters.</p> <code>list</code> <p>Finds all data types based on the specified parameters.</p> <code>create</code> <p>Creates a new data type.</p> <p>Examples:</p> <p>Get a data type by reference</p> <pre><code>&gt;&gt;&gt; api.data_types.get('_mytenant.data_types.7a5416d13572')\n&lt;DataType 7a5416d13572 title=\"My Data Type\" version=\"1.0\"&gt;\n</code></pre> <p>Find a data type by title</p> <pre><code>&gt;&gt;&gt; api.tenant_data_types.find(title='My Data Type')\n&lt;DataType 7a5416d13572 title=\"My Data Type\" version=\"1.0\"&gt;\n</code></pre> <p>List all global and tenant data types</p> <pre><code>&gt;&gt;&gt; api.data_types.list()\n[&lt;DataType xdm.context.person&gt;, &lt;DataType 7a5416d13572&gt;, ...]\n</code></pre> <p>List all global data types</p> <pre><code>&gt;&gt;&gt; api.global_data_types.list()\n[&lt;DataType xdm.context.person&gt;, &lt;DataType xdm.context.person-name&gt;, ...]\n</code></pre> <p>List all tenant data types</p> <pre><code>&gt;&gt;&gt; api.tenant_data_types.list()\n[&lt;DataType 7a5416d13572&gt;, &lt;DataType 7a5416d13571&gt;, ...]\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>class DataTypeCollection(ResourceCollection):\n\"\"\" Collection of DataType resources.\n    Initialized through `api.data_types`, `api.global_data_types`, or `api.tenant_data_types`.\n    Methods:\n        get: Retrieves a data type based on the provided reference.\n        find: Finds a data type based on the specified parameters.\n        list: Finds all data types based on the specified parameters.\n        create: Creates a new data type.\n    Examples:\n        Get a data type by reference\n        &gt;&gt;&gt; api.data_types.get('_mytenant.data_types.7a5416d13572')\n        &lt;DataType 7a5416d13572 title=\"My Data Type\" version=\"1.0\"&gt;\n        Find a data type by title\n        &gt;&gt;&gt; api.tenant_data_types.find(title='My Data Type')\n        &lt;DataType 7a5416d13572 title=\"My Data Type\" version=\"1.0\"&gt;\n        List all global and tenant data types\n        &gt;&gt;&gt; api.data_types.list()\n        [&lt;DataType xdm.context.person&gt;, &lt;DataType 7a5416d13572&gt;, ...]\n        List all global data types\n        &gt;&gt;&gt; api.global_data_types.list()\n        [&lt;DataType xdm.context.person&gt;, &lt;DataType xdm.context.person-name&gt;, ...]\n        List all tenant data types\n        &gt;&gt;&gt; api.tenant_data_types.list()\n        [&lt;DataType 7a5416d13572&gt;, &lt;DataType 7a5416d13571&gt;, ...]\n    \"\"\"\ndef __init__(self, api: Api, container:Optional[Container]=None):\nsuper().__init__(api, container=container, resources=[ResourceType.DATA_TYPE])\ndef get(self, id) -&gt; DataType:\nreturn super().get(id)\ndef find(self, full:bool=True, **params) -&gt; DataType:\nreturn super().find(full, **params)\ndef list(self, full:bool=False, **params) -&gt; list[DataType]:\nreturn super().list(full, **params)\ndef create(self,\ntitle: str,\ndescription: str = '',\nproperties: dict[str, dict] = {},\n) -&gt; DataType:\n\"\"\"\n        Create a new data type.\n        Args:\n            title (str): The title of the data type.\n            description (str, optional): The description of the data type. Defaults to ''.\n            properties (dict[str, dict], optional): The properties of the data type. Defaults to {}.\n        Returns:\n            DataType: The created data type.\n        Examples:\n            &gt;&gt;&gt; data_type = api.data_types.create(\n            ...     title='My Data Type',\n            ...     description='My test data type',\n            ...     properties={\n            ...         '_mytenant': {\n            ...             'type': 'object',\n            ...             'properties': {\n            ...                 'is_super_star': {'type': 'boolean'},\n            ...             }\n            ...         },\n            ...     }\n            ... )\n        \"\"\"\nreturn self._create({\n'type': 'object',\n'title': title,\n'description': description,\n'properties': properties,\n})\n</code></pre>"},{"location":"reference/#aezpz.schema.DataTypeCollection.create","title":"<code>create(title, description='', properties={})</code>","text":"<p>Create a new data type.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the data type.</p> required <code>description</code> <code>str</code> <p>The description of the data type. Defaults to ''.</p> <code>''</code> <code>properties</code> <code>dict[str, dict]</code> <p>The properties of the data type. Defaults to {}.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>DataType</code> <code>DataType</code> <p>The created data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = api.data_types.create(\n...     title='My Data Type',\n...     description='My test data type',\n...     properties={\n...         '_mytenant': {\n...             'type': 'object',\n...             'properties': {\n...                 'is_super_star': {'type': 'boolean'},\n...             }\n...         },\n...     }\n... )\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>def create(self,\ntitle: str,\ndescription: str = '',\nproperties: dict[str, dict] = {},\n) -&gt; DataType:\n\"\"\"\n    Create a new data type.\n    Args:\n        title (str): The title of the data type.\n        description (str, optional): The description of the data type. Defaults to ''.\n        properties (dict[str, dict], optional): The properties of the data type. Defaults to {}.\n    Returns:\n        DataType: The created data type.\n    Examples:\n        &gt;&gt;&gt; data_type = api.data_types.create(\n        ...     title='My Data Type',\n        ...     description='My test data type',\n        ...     properties={\n        ...         '_mytenant': {\n        ...             'type': 'object',\n        ...             'properties': {\n        ...                 'is_super_star': {'type': 'boolean'},\n        ...             }\n        ...         },\n        ...     }\n        ... )\n    \"\"\"\nreturn self._create({\n'type': 'object',\n'title': title,\n'description': description,\n'properties': properties,\n})\n</code></pre>"},{"location":"reference/#aezpz.schema.BehaviorCollection","title":"<code>BehaviorCollection</code>","text":"<p>             Bases: <code>ResourceCollection</code></p> <p>Collection of Behavior resources.</p> <p>Initialized through <code>api.behaviors</code>.</p> <p>Attributes:</p> Name Type Description <code>adhoc</code> <code>Behavior</code> <p>The adhoc behavior.</p> <code>record</code> <code>Behavior</code> <p>The record behavior.</p> <code>time_series</code> <code>Behavior</code> <p>The time series behavior.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.behaviors.adhoc\n&lt;Behavior xdm.data.adhoc&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; api.behaviors.record\n&lt;Behavior xdm.data.record&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; api.behaviors.time_series\n&lt;Behavior xdm.data.time-series&gt;\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>class BehaviorCollection(ResourceCollection):\n\"\"\" Collection of Behavior resources.\n    Initialized through `api.behaviors`.\n    Attributes:\n        adhoc: The adhoc behavior.\n        record: The record behavior.\n        time_series: The time series behavior.\n    Examples:\n        &gt;&gt;&gt; api.behaviors.adhoc\n        &lt;Behavior xdm.data.adhoc&gt;\n        &gt;&gt;&gt; api.behaviors.record\n        &lt;Behavior xdm.data.record&gt;\n        &gt;&gt;&gt; api.behaviors.time_series\n        &lt;Behavior xdm.data.time-series&gt;\n    \"\"\"\nadhoc: Behavior\nrecord: Behavior\ntime_series: Behavior\ndef __init__(self, api: Api, container:Optional[Container]=None):\nsuper().__init__(api, container=container, resources=[ResourceType.BEHAVIOR])\nself.adhoc = Behavior(self.api, 'https://ns.adobe.com/xdm/data/adhoc')\nself.record = Behavior(self.api, 'https://ns.adobe.com/xdm/data/record')\nself.time_series = Behavior(self.api, 'https://ns.adobe.com/xdm/data/time-series')\ndef get(self, id) -&gt; Behavior:\nreturn super().get(id)\ndef find(self, full:bool=True, **params) -&gt; Behavior:\nreturn super().find(full, **params)\ndef list(self, full:bool=False, **params) -&gt; list[Behavior]:\nreturn super().list(full, **params)\n</code></pre>"},{"location":"reference/#aezpz.schema.Resource","title":"<code>Resource</code>","text":"<p>Base class for all resources.</p> <p>Attributes:</p> Name Type Description <code>body</code> <code>dict</code> <p>The raw body of the resource.</p> <code>id</code> <code>str</code> <p>The <code>meta:altId</code> of the resource.</p> <code>ref</code> <code>str</code> <p>The <code>$id</code> of the resource.</p> <code>uuid</code> <code>str</code> <p>The unique identifier part of the id or ref.</p> <code>container</code> <code>Container</code> <p>The container of the resource either \"global\" or \"tenant\".</p> <code>tenant</code> <code>Optional[str]</code> <p>The tenant name used in the resource id. Available only for tenant resources.</p> <code>version</code> <code>str</code> <p>The version of the resource.</p> <code>title</code> <code>str</code> <p>The title of the resource.</p> <code>description</code> <code>str</code> <p>The description of the resource.</p> <code>extends</code> <code>list[Resource]</code> <p>The list of resources that the resource extends.</p> <p>Methods:</p> Name Description <code>get</code> <p>Refreshes the data to be in sync with the server.</p> <code>delete</code> <p>Deletes the resource.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; schema = api.schemas.get('_mytenant.schemas.7a5416d13572')\n&lt;Schema 7a5416d13572 title=\"My Schema\" version=\"1.0\"&gt;\n</code></pre> <p>Update the title of a schema (will send a PATCH request to the server)</p> <pre><code>&gt;&gt;&gt; schema.title = 'My New Schema'\n</code></pre> <p>Update the description of a schema</p> <pre><code>&gt;&gt;&gt; schema.description = 'My new test schema'\n</code></pre> <p>Get attribute from the raw response body</p> <pre><code>&gt;&gt;&gt; schema.body['meta:altId']\n'_mytenant.schemas.7a5416d13572'\n</code></pre> <p>Delete the schema</p> <pre><code>&gt;&gt;&gt; schema.delete()\n</code></pre> Source code in <code>aezpz/schema.py</code> <pre><code>class Resource:\n\"\"\" Base class for all resources.\n    Attributes:\n        body: The raw body of the resource.\n        id: The `meta:altId` of the resource.\n        ref: The `$id` of the resource.\n        uuid: The unique identifier part of the id or ref.\n        container: The container of the resource either \"global\" or \"tenant\".\n        tenant: The tenant name used in the resource id. Available only for tenant resources.\n        version: The version of the resource.\n        title: The title of the resource.\n        description: The description of the resource.\n        extends: The list of resources that the resource extends.\n    Methods:\n        get: Refreshes the data to be in sync with the server.\n        delete: Deletes the resource.\n    Examples:\n        &gt;&gt;&gt; schema = api.schemas.get('_mytenant.schemas.7a5416d13572')\n        &lt;Schema 7a5416d13572 title=\"My Schema\" version=\"1.0\"&gt;\n        Update the title of a schema (will send a PATCH request to the server)\n        &gt;&gt;&gt; schema.title = 'My New Schema'\n        Update the description of a schema\n        &gt;&gt;&gt; schema.description = 'My new test schema'\n        Get attribute from the raw response body\n        &gt;&gt;&gt; schema.body['meta:altId']\n        '_mytenant.schemas.7a5416d13572'\n        Delete the schema\n        &gt;&gt;&gt; schema.delete()\n    \"\"\"\napi: Api\nbody: dict\ntype: ResourceType\nid: str\nref: str\nuuid: str\ntenant: Optional[str]\ncontainer: Container\ndef __init__(self, api: Api, body):\nif type(body) is str:\nref = SchemaRef(body)\nbody = { '$id': ref.ref }\nelif isinstance(body, SchemaRef):\nref = body\nbody = { '$id': ref.ref }\nelif type(body) is dict:\nref = SchemaRef(body['$id'])\nelse:\nraise TypeError(f'Unexpected body type: {body}')\nself.api = api\nself.body = body\nself.id = ref.id\nself.uuid = ref.uuid\nself.ref = ref.ref\nself.tenant = ref.tenant\nself.container = ref.container\nself.type = self.__class__.type\nassert self.type == ref.resource, 'Mismatched resource type'\ndef request(self, method, full:bool=False, json=None):\nr = self.api.request(\nmethod=method,\npath=get_resource_path(\ncontainer=self.container,\nresource=self.type,\nid=self.id,\n),\nheaders=get_accept_header(\nxed='full' if full else None\n),\njson=json,\n)\nif r is not None:\nassert r['$id'] == self.ref\nassert r['meta:altId'] == self.id\nself.body.update(**r)\nreturn self\n@property\ndef version(self) -&gt; str:\nif 'version' not in self.body:\nself.get(full=False)\nreturn self.body['version']\n@property\ndef title(self) -&gt; str:\nif 'title' not in self.body:\nself.get(full=False)\nreturn self.body['title']\n@title.setter\ndef title(self, value):\nself.request('PATCH', json=[{\n'op': 'replace',\n'path': '/title',\n'value': value,\n}])\n@property\ndef description(self) -&gt; str:\nif 'description' not in self.body:\nself.get(full=False)\nreturn self.body['description']\n@description.setter\ndef description(self, value):\nself.request('PATCH', json=[{\n'op': 'replace',\n'path': '/description',\n'value': value,\n}])\n@property\ndef properties(self) -&gt; dict[str, dict]:\nif 'properties' not in self.body:\nself.get(full=True)\nself.body.setdefault('properties', {})\nreturn self.body['properties']\n@property\ndef definitions(self) -&gt; dict[str, dict]:\nif 'allOf' not in self.body:\nself.get(full=False)\nself.body.setdefault('allOf', [])\nproperties = {}\nfor record in self.body['allOf']:\ndefinition = record\nif record.get('$ref','').startswith('#'):\nassert 'properties' not in record, 'unexpected \"properties\" and \"$ref\" definition'\nassert record['$ref'].startswith('#/definitions/'), 'unexpected non-definitions reference'\nfield = record['$ref'][len('#/definitions/'):]\nassert '/' not in field, 'unexpected nested definition reference'\ndefinition = self.body.get('definitions',{}).get(field)\nassert definition is not None, 'reference to missing definition'\nassert 'properties' in definition, 'expected definition to be an object'\nfor key,val in definition.get('properties',{}).items():\nassert key not in properties, 'unhandled merging of definitions'\nproperties[key] = val\nreturn properties\n@property\ndef extends(self) -&gt; list[Resource]:\nif 'meta:extends' not in self.body:\nself.get(full=False)\nself.body.setdefault('meta:extends', [])\nextends = []\nfor ref in self.body['meta:extends']:\nextends.append(SchemaRef(ref).init(self.api))\nreturn extends\ndef get(self, full=True):\nreturn self.request('GET', full=full)\ndef delete(self):\nself.request('DELETE')\ndef __repr__(self):\nreturn '&lt;{class_name} {uuid}{title}{version}&gt;'.format(\nclass_name=self.__class__.__name__,\nuuid=self.uuid,\ntitle=f' title=\"{self.title}\"' if 'title' in self.body else '',\nversion=f' version=\"{self.version}\"' if 'version' in self.body else '',\n)\n</code></pre>"},{"location":"reference/#aezpz.schema.Schema","title":"<code>Schema</code>","text":"<p>             Bases: <code>Resource</code></p> <p>A schema resource.</p> <p>Attributes:</p> Name Type Description <code>parent</code> <code>Class</code> <p>The parent class that the schema inherits from.</p> <code>behavior</code> <code>Behavior</code> <p>The behavior of the schema.</p> <code>field_groups</code> <code>list[FieldGroup]</code> <p>The list of field groups used in the schema.</p> Source code in <code>aezpz/schema.py</code> <pre><code>class Schema(Resource):\n\"\"\" A schema resource.\n    Attributes:\n        parent: The parent class that the schema inherits from.\n        behavior: The behavior of the schema.\n        field_groups: The list of field groups used in the schema.\n    \"\"\"\ntype = ResourceType.SCHEMA\n@property\ndef parent(self) -&gt; Class:\nif 'meta:class' not in self.body:\nself.get()\nreturn Class(self.api, self.body['meta:class'])\n@property\ndef behavior(self) -&gt; Behavior:\nbehaviors = [r for r in self.extends if r.type == ResourceType.BEHAVIOR]\nassert len(behaviors) == 1\nreturn behaviors[0]\n@property\ndef field_groups(self) -&gt; list[FieldGroup]:\nreturn [resource for resource in self.extends if resource.type == ResourceType.FIELD_GROUP]\ndef add_field_group(self, field_group: FieldGroup):\nassert isinstance(field_group, FieldGroup)\nr = self.request('PATCH', json=[\n{ 'op': 'add', 'path': '/allOf/-', 'value': {'$ref': field_group.id} }\n])\nreturn self(**r)\n</code></pre>"},{"location":"reference/#aezpz.schema.Class","title":"<code>Class</code>","text":"<p>             Bases: <code>Resource</code></p> <p>A class resource.</p> <p>Attributes:</p> Name Type Description <code>behavior</code> <code>Behavior</code> <p>The behavior of the class.</p> <code>field_groups</code> <code>list[FieldGroup]</code> <p>The list of field groups used in the class.</p> Source code in <code>aezpz/schema.py</code> <pre><code>class Class(Resource):\n\"\"\" A class resource.\n    Attributes:\n        behavior: The behavior of the class.\n        field_groups: The list of field groups used in the class.\n    \"\"\"\ntype = ResourceType.CLASS\n@property\ndef behavior(self) -&gt; Behavior:\nbehaviors = [r for r in self.extends if r.type == ResourceType.BEHAVIOR]\nassert len(behaviors) == 1\nreturn behaviors[0]\n@property\ndef field_groups(self) -&gt; list[FieldGroup]:\nreturn [resource for resource in self.extends if resource.type == ResourceType.FIELD_GROUP]\n</code></pre>"},{"location":"reference/#aezpz.schema.FieldGroup","title":"<code>FieldGroup</code>","text":"<p>             Bases: <code>Resource</code></p> <p>A field group resource.</p> <p>Attributes:</p> Name Type Description <code>intendedToExtend</code> <p>The resources this field group intends to extend.</p> Source code in <code>aezpz/schema.py</code> <pre><code>class FieldGroup(Resource):\n\"\"\" A field group resource.\n    Attributes:\n        intendedToExtend: The resources this field group intends to extend.\n    \"\"\"\ntype = ResourceType.FIELD_GROUP\n@property\ndef intendedToExtend(self):\nif 'meta:intendedToExtend' not in self.body:\nself.get(full=False)\nself.body.setdefault('meta:intendedToExtend', [])\nreturn [SchemaRef(ref).init(self.api) for ref in self.body['meta:intendedToExtend']]\n</code></pre>"},{"location":"reference/#aezpz.schema.DataType","title":"<code>DataType</code>","text":"<p>             Bases: <code>Resource</code></p> <p>A data type resource.</p> Source code in <code>aezpz/schema.py</code> <pre><code>class DataType(Resource):\n\"\"\" A data type resource.\n    \"\"\"\ntype = ResourceType.DATA_TYPE\n</code></pre>"},{"location":"reference/#aezpz.schema.Behavior","title":"<code>Behavior</code>","text":"<p>             Bases: <code>Resource</code></p> <p>A behavior resource.</p> Source code in <code>aezpz/schema.py</code> <pre><code>class Behavior(Resource):\n\"\"\" A behavior resource.\n    \"\"\"\ntype = ResourceType.BEHAVIOR\n</code></pre>"},{"location":"reference/#aezpz.datasets.DatasetCollection","title":"<code>DatasetCollection</code>","text":"<p>Collection of Datasets.</p> <p>Initialized through <code>api.datasets</code>.</p> <p>Methods:</p> Name Description <code>get</code> <p>Find an existing dataset by id.</p> <code>find</code> <p>Find an existing dataset by name.</p> <code>list</code> <p>List all datasets.</p> <code>create</code> <p>Create a new dataset.</p> Source code in <code>aezpz/datasets.py</code> <pre><code>class DatasetCollection:\n\"\"\" Collection of Datasets.\n    Initialized through `api.datasets`.\n    Methods:\n        get: Find an existing dataset by id.\n        find: Find an existing dataset by name.\n        list: List all datasets.\n        create: Create a new dataset.\n    \"\"\"\napi: Api\ndef __init__(self, api: Api):\nself.api = api\ndef get(self, id) -&gt; DataSet:\n\"\"\" Get a dataset by id.\n        Examples:\n            &gt;&gt;&gt; api.datasets.get('65cfb1ca9e91f22')\n            &lt;DataSet 65cfb1ca9e91f22&gt;\n        \"\"\"\nreturn DataSet(api=self.api, id=id)\ndef find(self, **kwargs) -&gt; DataSet:\n\"\"\" Find a dataset by properties\n        Examples:\n            &gt;&gt;&gt; api.datasets.find(name='My Dataset')\n            &lt;DataSet 65cfb1ca9e91f22 name=\"My Dataset\" version=\"1.0.0\"&gt;\n        \"\"\"\ndatasets = self.list(**kwargs)\nassert len(datasets) == 1, f\"Expected to find exactly one dataset, but found {len(datasets)}\"\nreturn datasets[0]\ndef list(self, **kwargs) -&gt; list[DataSet]:\n\"\"\" List all datasets that match the given properties.\n        Examples:\n            &gt;&gt;&gt; api.datasets.list(name=\"untitled\")\n            [&lt;DataSet 65cfb1ca9e91f22 name=\"untitled\" version=\"1.0.0\"&gt;, ...]\n        \"\"\"\nparams = kwargs\ndatasets = []\nwhile True:\nr = self.api.request('GET', '/data/foundation/catalog/dataSets', params=params)\nfor k, v in r.items():\ndatasets.append(DataSet(self.api, k, v))\nif len(r) == 100:\nparams['start'] = params.get('start',0) + 100\nelse:\nbreak\nreturn datasets\ndef create(self,\nschema: Schema,\nname: str = None,\ndescription: str = None,\ntags: dict[str, Union[str, list[str]]] = None,\nenableErrorDiagnostics: bool = None,\nobservableSchema: dict = None,\nformat: Literal['','csv','text','json','parquet','sequencefile','avro'] = None,\ndelimiters: Union[str, list[str]] = None,\nquotes: Union[str, list[str]] = None,\nescapes: Union[str, list[str]] = None,\nnullMarkers: Union[str, list[str]] = None,\nheader: bool = None,\ncharset: Literal['US-ASCII','UTF-8','ISO-8859-1',''] = None,\ndataSourceId: int = None,\n) -&gt; DataSet:\n\"\"\" Create a new dataset.\n        Args:\n            schema: The schema of the dataset.\n            name: A descriptive, human-readable name for this dataset.\n            description: A longer text description of the dataset.\n            tags: Tags are values associated with a particular object, \n                these are generally used by external systems for marking an object \n                in a way that it understands. Normally tags are not used for \n                internal Catalog business logic\n            enableErrorDiagnostics: This field provides the ability to opt in to \n                generating diagnostic files for the errors while ingesting data.\n            observableSchema: observableSchema stores a JSON Schema object that is a \n                valid subset (including the null case) of the XDM model specified by schemaRef.\n            format: The file format for all dataSetFiles associated with this view. \n                Required for CSV upload workflows, but optional in all other cases.\n            delimiters: Characters used to separate fields for the file format.\n            quotes: Quote characters used for the file format.\n            escapes: Escape characters used for the file format.\n            nullMarkers: Null markers used for the file format.\n            header: Whether the file format has a header.\n            charset: The character encoding of the files..\n            dataSourceId: The ID of the datasource. It must be unique, along with its name.\n        Examples:\n            &gt;&gt;&gt; api.datasets.create()\n            &lt;DataSet 65cfb1ca9e91f22 name=\"untitled\" version=\"1.0.0\"&gt;\n        \"\"\"\nbody = form_dataset_body(\nname=name,\ndescription=description,\ntags=tags,\nenableErrorDiagnostics=enableErrorDiagnostics,\nobservableSchema=observableSchema,\nformat=format,\ndelimiters=delimiters,\nquotes=quotes,\nescapes=escapes,\nnullMarkers=nullMarkers,\nheader=header,\ncharset=charset,\nschema=schema,\ndataSourceId=dataSourceId,\n)\nr = self.api.request('POST', '/data/foundation/catalog/dataSets', json=body)\nreturn DataSet(self.api, parse_id_list(r))\n</code></pre>"},{"location":"reference/#aezpz.datasets.DatasetCollection.get","title":"<code>get(id)</code>","text":"<p>Get a dataset by id.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.datasets.get('65cfb1ca9e91f22')\n&lt;DataSet 65cfb1ca9e91f22&gt;\n</code></pre> Source code in <code>aezpz/datasets.py</code> <pre><code>def get(self, id) -&gt; DataSet:\n\"\"\" Get a dataset by id.\n    Examples:\n        &gt;&gt;&gt; api.datasets.get('65cfb1ca9e91f22')\n        &lt;DataSet 65cfb1ca9e91f22&gt;\n    \"\"\"\nreturn DataSet(api=self.api, id=id)\n</code></pre>"},{"location":"reference/#aezpz.datasets.DatasetCollection.find","title":"<code>find(**kwargs)</code>","text":"<p>Find a dataset by properties</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.datasets.find(name='My Dataset')\n&lt;DataSet 65cfb1ca9e91f22 name=\"My Dataset\" version=\"1.0.0\"&gt;\n</code></pre> Source code in <code>aezpz/datasets.py</code> <pre><code>def find(self, **kwargs) -&gt; DataSet:\n\"\"\" Find a dataset by properties\n    Examples:\n        &gt;&gt;&gt; api.datasets.find(name='My Dataset')\n        &lt;DataSet 65cfb1ca9e91f22 name=\"My Dataset\" version=\"1.0.0\"&gt;\n    \"\"\"\ndatasets = self.list(**kwargs)\nassert len(datasets) == 1, f\"Expected to find exactly one dataset, but found {len(datasets)}\"\nreturn datasets[0]\n</code></pre>"},{"location":"reference/#aezpz.datasets.DatasetCollection.list","title":"<code>list(**kwargs)</code>","text":"<p>List all datasets that match the given properties.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.datasets.list(name=\"untitled\")\n[&lt;DataSet 65cfb1ca9e91f22 name=\"untitled\" version=\"1.0.0\"&gt;, ...]\n</code></pre> Source code in <code>aezpz/datasets.py</code> <pre><code>def list(self, **kwargs) -&gt; list[DataSet]:\n\"\"\" List all datasets that match the given properties.\n    Examples:\n        &gt;&gt;&gt; api.datasets.list(name=\"untitled\")\n        [&lt;DataSet 65cfb1ca9e91f22 name=\"untitled\" version=\"1.0.0\"&gt;, ...]\n    \"\"\"\nparams = kwargs\ndatasets = []\nwhile True:\nr = self.api.request('GET', '/data/foundation/catalog/dataSets', params=params)\nfor k, v in r.items():\ndatasets.append(DataSet(self.api, k, v))\nif len(r) == 100:\nparams['start'] = params.get('start',0) + 100\nelse:\nbreak\nreturn datasets\n</code></pre>"},{"location":"reference/#aezpz.datasets.DatasetCollection.create","title":"<code>create(schema, name=None, description=None, tags=None, enableErrorDiagnostics=None, observableSchema=None, format=None, delimiters=None, quotes=None, escapes=None, nullMarkers=None, header=None, charset=None, dataSourceId=None)</code>","text":"<p>Create a new dataset.</p> <p>Parameters:</p> Name Type Description Default <code>schema</code> <code>Schema</code> <p>The schema of the dataset.</p> required <code>name</code> <code>str</code> <p>A descriptive, human-readable name for this dataset.</p> <code>None</code> <code>description</code> <code>str</code> <p>A longer text description of the dataset.</p> <code>None</code> <code>tags</code> <code>dict[str, Union[str, list[str]]]</code> <p>Tags are values associated with a particular object,  these are generally used by external systems for marking an object  in a way that it understands. Normally tags are not used for  internal Catalog business logic</p> <code>None</code> <code>enableErrorDiagnostics</code> <code>bool</code> <p>This field provides the ability to opt in to  generating diagnostic files for the errors while ingesting data.</p> <code>None</code> <code>observableSchema</code> <code>dict</code> <p>observableSchema stores a JSON Schema object that is a  valid subset (including the null case) of the XDM model specified by schemaRef.</p> <code>None</code> <code>format</code> <code>Literal['', 'csv', 'text', 'json', 'parquet', 'sequencefile', 'avro']</code> <p>The file format for all dataSetFiles associated with this view.  Required for CSV upload workflows, but optional in all other cases.</p> <code>None</code> <code>delimiters</code> <code>Union[str, list[str]]</code> <p>Characters used to separate fields for the file format.</p> <code>None</code> <code>quotes</code> <code>Union[str, list[str]]</code> <p>Quote characters used for the file format.</p> <code>None</code> <code>escapes</code> <code>Union[str, list[str]]</code> <p>Escape characters used for the file format.</p> <code>None</code> <code>nullMarkers</code> <code>Union[str, list[str]]</code> <p>Null markers used for the file format.</p> <code>None</code> <code>header</code> <code>bool</code> <p>Whether the file format has a header.</p> <code>None</code> <code>charset</code> <code>Literal['US-ASCII', 'UTF-8', 'ISO-8859-1', '']</code> <p>The character encoding of the files..</p> <code>None</code> <code>dataSourceId</code> <code>int</code> <p>The ID of the datasource. It must be unique, along with its name.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; api.datasets.create()\n&lt;DataSet 65cfb1ca9e91f22 name=\"untitled\" version=\"1.0.0\"&gt;\n</code></pre> Source code in <code>aezpz/datasets.py</code> <pre><code>def create(self,\nschema: Schema,\nname: str = None,\ndescription: str = None,\ntags: dict[str, Union[str, list[str]]] = None,\nenableErrorDiagnostics: bool = None,\nobservableSchema: dict = None,\nformat: Literal['','csv','text','json','parquet','sequencefile','avro'] = None,\ndelimiters: Union[str, list[str]] = None,\nquotes: Union[str, list[str]] = None,\nescapes: Union[str, list[str]] = None,\nnullMarkers: Union[str, list[str]] = None,\nheader: bool = None,\ncharset: Literal['US-ASCII','UTF-8','ISO-8859-1',''] = None,\ndataSourceId: int = None,\n) -&gt; DataSet:\n\"\"\" Create a new dataset.\n    Args:\n        schema: The schema of the dataset.\n        name: A descriptive, human-readable name for this dataset.\n        description: A longer text description of the dataset.\n        tags: Tags are values associated with a particular object, \n            these are generally used by external systems for marking an object \n            in a way that it understands. Normally tags are not used for \n            internal Catalog business logic\n        enableErrorDiagnostics: This field provides the ability to opt in to \n            generating diagnostic files for the errors while ingesting data.\n        observableSchema: observableSchema stores a JSON Schema object that is a \n            valid subset (including the null case) of the XDM model specified by schemaRef.\n        format: The file format for all dataSetFiles associated with this view. \n            Required for CSV upload workflows, but optional in all other cases.\n        delimiters: Characters used to separate fields for the file format.\n        quotes: Quote characters used for the file format.\n        escapes: Escape characters used for the file format.\n        nullMarkers: Null markers used for the file format.\n        header: Whether the file format has a header.\n        charset: The character encoding of the files..\n        dataSourceId: The ID of the datasource. It must be unique, along with its name.\n    Examples:\n        &gt;&gt;&gt; api.datasets.create()\n        &lt;DataSet 65cfb1ca9e91f22 name=\"untitled\" version=\"1.0.0\"&gt;\n    \"\"\"\nbody = form_dataset_body(\nname=name,\ndescription=description,\ntags=tags,\nenableErrorDiagnostics=enableErrorDiagnostics,\nobservableSchema=observableSchema,\nformat=format,\ndelimiters=delimiters,\nquotes=quotes,\nescapes=escapes,\nnullMarkers=nullMarkers,\nheader=header,\ncharset=charset,\nschema=schema,\ndataSourceId=dataSourceId,\n)\nr = self.api.request('POST', '/data/foundation/catalog/dataSets', json=body)\nreturn DataSet(self.api, parse_id_list(r))\n</code></pre>"},{"location":"reference/#aezpz.datasets.DataSet","title":"<code>DataSet</code>","text":"Source code in <code>aezpz/datasets.py</code> <pre><code>class DataSet:\napi: Api\nid: str\n_body: dict\ndef __init__(self, api: Api, id: str, body: dict = None):\nself.api = api\nself.id = id\nself._body = body\ndef request(self, method: Literal['GET', 'POST', 'PUT', 'DELETE'], json: Optional[dict[str, Any]] = None):\nreturn self.api.request(method, f'/data/foundation/catalog/dataSets/{self.id}', json=json)\n@property\ndef body(self):\nif self._body is None:\nself.get()\nreturn self._body\n@property\ndef name(self) -&gt; str:\nreturn self.body.get('name')\n@property\ndef description(self) -&gt; str:\nreturn self.body.get('description')\n@property\ndef tags(self) -&gt; dict[str, list[str]]:\nreturn self.body.get('tags')\n@property\ndef enableErrorDiagnostics(self) -&gt; bool:\nreturn self.body.get('enableErrorDiagnostics')\n@property\ndef observableSchema(self) -&gt; dict:\nreturn self.body.get('observableSchema')\n@property\ndef format(self) -&gt; Literal['','csv','text','json','parquet','sequencefile','avro']:\nreturn self.body.get('fileDescription', {}).get('format')\n@property\ndef delimiters(self) -&gt; list[str]:\nreturn self.body.get('fileDescription', {}).get('delimiters', [])\n@property\ndef quotes(self) -&gt; list[str]:\nreturn self.body.get('fileDescription', {}).get('quotes', [])\n@property\ndef escapes(self) -&gt; list[str]:\nreturn self.body.get('fileDescription', {}).get('escapes', [])\n@property\ndef nullMarkers(self) -&gt; list[str]:\nreturn self.body.get('fileDescription', {}).get('nullMarkers', [])\n@property\ndef header(self) -&gt; bool:\nreturn self.body.get('fileDescription', {}).get('header')\n@property\ndef charset(self) -&gt; Literal['US-ASCII','UTF-8','ISO-8859-1','']:\nreturn self.body.get('fileDescription', {}).get('charset', '')\n@property\ndef schema(self):\nif 'schemaRef' not in self.body:\nreturn None\nreturn self.api.schemas.get(self.body.get('schemaRef')['id'])\n@property\ndef dataSourceId(self) -&gt; int:\nreturn self.body.get('dataSourceId')\n@property\ndef version(self) -&gt; str:\nreturn self.body.get('version')\n@property\ndef created(self) -&gt; datetime.datetime:\nreturn datetime.datetime.fromtimestamp(self.body.get('created') / 1000)\n@property\ndef updated(self) -&gt; datetime.datetime:\nreturn datetime.datetime.fromtimestamp(self.body.get('updated') / 1000)\ndef batches(self) -&gt; list[Batch]:\nreturn self.api.batches.list(dataSet=self.id)\ndef upload(self,\nfilepath: str,\nformat: Literal['json','jsonl','parquet','csv'],\nreplace: Union[bool, list[Batch]] = []\n) -&gt; Batch:\nbatch = self.api.batches.create(dataset=self, format=format, replace=replace)\nbatch.upload(filepath)\nbatch.complete()\nreturn self\ndef get(self) -&gt; DataSet:\nr = self.request('GET')\nassert self.id in r\nif self._body is None:\nself._body = {}\nself._body.update(**r[self.id])\nreturn self\ndef update(self,\nname: str = None,\ndescription: str = None,\ntags: dict[str, Union[str, list[str]]] = None,\nenableErrorDiagnostics: bool = None,\nobservableSchema: dict = None,\nformat: Literal['','csv','text','json','parquet','sequencefile','avro'] = None,\ndelimiters: Union[str, list[str]] = None,\nquotes: Union[str, list[str]] = None,\nescapes: Union[str, list[str]] = None,\nnullMarkers: Union[str, list[str]] = None,\nheader: bool = None,\ncharset: Literal['US-ASCII','UTF-8','ISO-8859-1',''] = None,\nschema: Schema = None,\ndataSourceId: int = None,\n) -&gt; DataSet:\n\"\"\" Update the dataset.\n        Args:\n            name: A descriptive, human-readable name for this dataset.\n            description: A longer text description of the dataset.\n            tags: Tags are values associated with a particular object, \n                these are generally used by external systems for marking an object \n                in a way that it understands. Normally tags are not used for \n                internal Catalog business logic\n            enableErrorDiagnostics: This field provides the ability to opt in to \n                generating diagnostic files for the errors while ingesting data.\n            observableSchema: observableSchema stores a JSON Schema object that is a \n                valid subset (including the null case) of the XDM model specified by schemaRef.\n            format: The file format for all dataSetFiles associated with this view. \n                Required for CSV upload workflows, but optional in all other cases.\n            delimiters: Characters used to separate fields for the file format.\n            quotes: Quote characters used for the file format.\n            escapes: Escape characters used for the file format.\n            nullMarkers: Null markers used for the file format.\n            header: Whether the file format has a header.\n            charset: The character encoding of the files..\n            schema: The schema of the dataset.\n            dataSourceId: The ID of the datasource. It must be unique, along with its name.\n        \"\"\"\nbody = form_dataset_body(\nname=name,\ndescription=description,\ntags=tags,\nenableErrorDiagnostics=enableErrorDiagnostics,\nobservableSchema=observableSchema,\nformat=format,\ndelimiters=delimiters,\nquotes=quotes,\nescapes=escapes,\nnullMarkers=nullMarkers,\nheader=header,\ncharset=charset,\nschema=schema,\ndataSourceId=dataSourceId,\n)\nself.request('PATCH', json=body)\nself.get()\nreturn self\ndef delete(self) -&gt; DataSet:\nself.request('DELETE')\nreturn self\ndef __repr__(self):\nreturn '&lt;{class_name} {id}{name}{version}&gt;'.format(\nclass_name=self.__class__.__name__,\nid=self.id,\nname=f' name=\"{self.name}\"' if self._body is not None else '',\nversion=f' version=\"{self.version}\"' if self._body is not None else '',\n)\n</code></pre>"},{"location":"reference/#aezpz.datasets.DataSet.update","title":"<code>update(name=None, description=None, tags=None, enableErrorDiagnostics=None, observableSchema=None, format=None, delimiters=None, quotes=None, escapes=None, nullMarkers=None, header=None, charset=None, schema=None, dataSourceId=None)</code>","text":"<p>Update the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A descriptive, human-readable name for this dataset.</p> <code>None</code> <code>description</code> <code>str</code> <p>A longer text description of the dataset.</p> <code>None</code> <code>tags</code> <code>dict[str, Union[str, list[str]]]</code> <p>Tags are values associated with a particular object,  these are generally used by external systems for marking an object  in a way that it understands. Normally tags are not used for  internal Catalog business logic</p> <code>None</code> <code>enableErrorDiagnostics</code> <code>bool</code> <p>This field provides the ability to opt in to  generating diagnostic files for the errors while ingesting data.</p> <code>None</code> <code>observableSchema</code> <code>dict</code> <p>observableSchema stores a JSON Schema object that is a  valid subset (including the null case) of the XDM model specified by schemaRef.</p> <code>None</code> <code>format</code> <code>Literal['', 'csv', 'text', 'json', 'parquet', 'sequencefile', 'avro']</code> <p>The file format for all dataSetFiles associated with this view.  Required for CSV upload workflows, but optional in all other cases.</p> <code>None</code> <code>delimiters</code> <code>Union[str, list[str]]</code> <p>Characters used to separate fields for the file format.</p> <code>None</code> <code>quotes</code> <code>Union[str, list[str]]</code> <p>Quote characters used for the file format.</p> <code>None</code> <code>escapes</code> <code>Union[str, list[str]]</code> <p>Escape characters used for the file format.</p> <code>None</code> <code>nullMarkers</code> <code>Union[str, list[str]]</code> <p>Null markers used for the file format.</p> <code>None</code> <code>header</code> <code>bool</code> <p>Whether the file format has a header.</p> <code>None</code> <code>charset</code> <code>Literal['US-ASCII', 'UTF-8', 'ISO-8859-1', '']</code> <p>The character encoding of the files..</p> <code>None</code> <code>schema</code> <code>Schema</code> <p>The schema of the dataset.</p> <code>None</code> <code>dataSourceId</code> <code>int</code> <p>The ID of the datasource. It must be unique, along with its name.</p> <code>None</code> Source code in <code>aezpz/datasets.py</code> <pre><code>def update(self,\nname: str = None,\ndescription: str = None,\ntags: dict[str, Union[str, list[str]]] = None,\nenableErrorDiagnostics: bool = None,\nobservableSchema: dict = None,\nformat: Literal['','csv','text','json','parquet','sequencefile','avro'] = None,\ndelimiters: Union[str, list[str]] = None,\nquotes: Union[str, list[str]] = None,\nescapes: Union[str, list[str]] = None,\nnullMarkers: Union[str, list[str]] = None,\nheader: bool = None,\ncharset: Literal['US-ASCII','UTF-8','ISO-8859-1',''] = None,\nschema: Schema = None,\ndataSourceId: int = None,\n) -&gt; DataSet:\n\"\"\" Update the dataset.\n    Args:\n        name: A descriptive, human-readable name for this dataset.\n        description: A longer text description of the dataset.\n        tags: Tags are values associated with a particular object, \n            these are generally used by external systems for marking an object \n            in a way that it understands. Normally tags are not used for \n            internal Catalog business logic\n        enableErrorDiagnostics: This field provides the ability to opt in to \n            generating diagnostic files for the errors while ingesting data.\n        observableSchema: observableSchema stores a JSON Schema object that is a \n            valid subset (including the null case) of the XDM model specified by schemaRef.\n        format: The file format for all dataSetFiles associated with this view. \n            Required for CSV upload workflows, but optional in all other cases.\n        delimiters: Characters used to separate fields for the file format.\n        quotes: Quote characters used for the file format.\n        escapes: Escape characters used for the file format.\n        nullMarkers: Null markers used for the file format.\n        header: Whether the file format has a header.\n        charset: The character encoding of the files..\n        schema: The schema of the dataset.\n        dataSourceId: The ID of the datasource. It must be unique, along with its name.\n    \"\"\"\nbody = form_dataset_body(\nname=name,\ndescription=description,\ntags=tags,\nenableErrorDiagnostics=enableErrorDiagnostics,\nobservableSchema=observableSchema,\nformat=format,\ndelimiters=delimiters,\nquotes=quotes,\nescapes=escapes,\nnullMarkers=nullMarkers,\nheader=header,\ncharset=charset,\nschema=schema,\ndataSourceId=dataSourceId,\n)\nself.request('PATCH', json=body)\nself.get()\nreturn self\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#creating-a-schema","title":"Creating a Schema","text":"<p>To create a schema, you'll need to call the <code>schemas.create</code> method and pass the <code>title</code> and <code>description</code> of the schema that you want to create.</p> <pre><code>import aezpz\n# Load the credentials from the credentials file\napi = aezpz.load_config('path/to/credentials.json')\n</code></pre> <p>Every schema needs to inherit from a class. The class that you inherit from will determine the type of schema that you are creating. For example, if you want to create a schema that represents a customer profile, you would inherit from the <code>_xdm.context.profile</code> class.</p> <pre><code># Load the profile class\nprofile_class = api.classes.get('_xdm.context.profile')\n</code></pre> <p>Next in order to add fields to the schema, we'll need to create a field group to contain those fields. A field group is a way to organize fields within a schema, and allow those fields to be reused in other schemas.</p> <pre><code># Create a field group\nfield_group = api.field_groups.create(\nintendedToExtend=[profile_class],\ntitle='My Field Group',\ndescription='This is a field group that I created',\nproperties={\n'_mytenant': {\n'type': 'object',\n'properties': {\n'is_super_star': {'type': 'boolean'},\n}\n},\n}\n)\n</code></pre> <p>Finally, we can create the schema by calling the <code>schemas.create</code> method and passing the <code>title</code>, <code>description</code>, and <code>fieldGroup</code> of the schema that you want to create.</p> <pre><code># Create the schema\nschema = api.schemas.create(\ntitle='My Schema',\ndescription='This is a schema that I created',\nparent=profile_class,\nfield_groups=[field_group]\n)\n</code></pre> <p>To list all of the fields that our newly created schema contains, we can access the <code>properties</code> attribute of the schema.</p> <pre><code>from pprint import pprint\npprint(schema.properties)\n#  {'_amcevangelists': {'meta:xdmType': 'object',\n#                       'properties': {'is_super_star': {'meta:xdmType': 'boolean',\n#                                                        'type': 'boolean'}},\n#                       'type': 'object'},\n#   '_id': {'description': 'A unique identifier for the record.',\n#           'format': 'uri-reference',\n#           'meta:xdmField': '@id',\n#           'meta:xdmType': 'string',\n#           'title': 'Identifier',\n#           'type': 'string'},\n#   '_repo': {'meta:xdmType': 'object',\n#             'meta:xedConverted': True,\n#             'properties': {'createDate': {'description': 'The server date and '\n#                                                          'time when the '\n#                                                          'resource was created '\n#                                                          'in the repository, '\n#                                                          'such as when an asset '\n#                                                          'file is first '\n#                                                          'uploaded or a '\n#                                                          'directory is created '\n#                                                          'by the server as the '\n#                                                          'parent of a new '\n#                                                          'asset. The date time '\n#                                                          'property should '\n#                                                          'conform to ISO 8601 '\n#                                                          'standard. An example '\n#                                                          'form is '\n#                                                          '\"2004-10-23T12:00:00-06:00\".',\n#                                           'examples': ['2004-10-23T12:00:00-06:00'],\n#                                           'format': 'date-time',\n#                                           'meta:immutable': True,\n#                                           'meta:usereditable': False,\n#                                           'meta:xdmField': 'repo:createDate',\n#                                           'meta:xdmType': 'date-time',\n#                                           'type': 'string'},\n#                            'modifyDate': {'description': 'The server date and '\n#                                                          'time when the '\n#                                                          'resource was last '\n#                                                          'modified in the '\n#                                                          'repository, such as '\n#                                                          'when a new version of '\n#                                                          'an asset is uploaded '\n#                                                          \"or a directory's \"\n#                                                          'child resource is '\n#                                                          'added or removed. The '\n#                                                          'date time property '\n#                                                          'should conform to ISO '\n#                                                          '8601 standard. An '\n#                                                          'example form is '\n#                                                          '\"2004-10-23T12:00:00-06:00\".',\n#                                           'examples': ['2004-10-23T12:00:00-06:00'],\n#                                           'format': 'date-time',\n#                                           'meta:usereditable': False,\n#                                           'meta:xdmField': 'repo:modifyDate',\n#                                           'meta:xdmType': 'date-time',\n#                                           'type': 'string'}},\n#             'type': 'object'},\n#   'createdByBatchID': {'description': 'The dataset files in Catalog which has '\n#                                       'been originating the creation of the '\n#                                       'record.',\n#                        'format': 'uri-reference',\n#                        'meta:xdmField': 'xdm:createdByBatchID',\n#                        'meta:xdmType': 'string',\n#                        'title': 'Created by batch identifier',\n#                        'type': 'string'},\n#   'modifiedByBatchID': {'description': 'The last dataset files in Catalog which '\n#                                        'has modified the record. At creation '\n#                                        'time, `modifiedByBatchID` is set as '\n#                                        '`createdByBatchID`.',\n#                         'format': 'uri-reference',\n#                         'meta:xdmField': 'xdm:modifiedByBatchID',\n#                         'meta:xdmType': 'string',\n#                         'title': 'Modified by batch identifier',\n#                         'type': 'string'},\n#   'personID': {'description': 'Unique identifier of Person/Profile fragment.',\n#                'meta:xdmField': 'xdm:personID',\n#                'meta:xdmType': 'string',\n#                'title': 'Person ID',\n#                'type': 'string'},\n#   'repositoryCreatedBy': {'description': 'User ID of who created the record.',\n#                           'meta:xdmField': 'xdm:repositoryCreatedBy',\n#                           'meta:xdmType': 'string',\n#                           'title': 'Created by user identifier',\n#                           'type': 'string'},\n#   'repositoryLastModifiedBy': {'description': 'User ID of who last modified the '\n#                                               'record. At creation time, '\n#                                               '`modifiedByUser` is set as '\n#                                               '`createdByUser`.',\n#                                'meta:xdmField': 'xdm:repositoryLastModifiedBy',\n#                                'meta:xdmType': 'string',\n#                                'title': 'Modified by user identifier',\n#                                'type': 'string'}}\n</code></pre> <p>To remove the resources that we just created, we can call <code>schema.delete</code> and <code>field_group.delete</code>.</p> <pre><code># Delete the schema\nschema.delete()\n# Delete the field_group\nfield_group.delete()\n</code></pre>"}]}